import { ZegoExpressEngine } from "zego-express-engine-webrtc";
import { ZegoRoomExtraInfo, ZegoUser } from "zego-express-engine-webrtm/sdk/code/zh/ZegoExpressEntity";
import { ZegoDeviceUpdateType, ZegoMediaOptions, ZegoRoomUser } from "./ZegoExpressManager.entity";
export declare class ZegoExpressManager {
    private participantDic;
    private streamDic;
    private localParticipant;
    private roomID;
    private streamMap;
    private roleMap;
    private mediaOptions;
    private deviceUpdateCallback;
    private roomUserUpdateCallback;
    private muteCohostMicrophoneCallback;
    private muteCohostCameraCallback;
    private invitedLiveJoinCallback;
    private kickedOutRoomCallback;
    private roomExtraInfoCallback;
    private isPublish;
    private hostLogoutKey;
    private inviteKey;
    private muteMicKey;
    private muteCameraKey;
    static shared: ZegoExpressManager;
    static engine: ZegoExpressEngine;
    private constructor();
    static getEngine(): ZegoExpressEngine;
    createEngine(appID: number, server: string): void;
    checkWebRTC(): Promise<boolean>;
    checkCamera(): Promise<boolean>;
    checkMicrophone(): Promise<boolean>;
    joinRoom(roomID: string, token: string, user: ZegoUser, options: ZegoMediaOptions[]): Promise<boolean>;
    enableCamera(enable: boolean): boolean;
    enableMic(enable: boolean): boolean;
    inviteJoinLive(userIDList: string[]): Promise<boolean>;
    muteCohostMicrophone(userIDList: string[]): Promise<boolean>;
    muteCohostCamera(userIDList: string[]): Promise<boolean>;
    getLocalVideoView(): HTMLMediaElement;
    getRemoteVideoView(userID: string): HTMLMediaElement;
    setRoomExtraInfo(key: string, value: string): Promise<boolean>;
    sendBroadcastMessage(message: string): Promise<boolean>;
    leaveRoom(): Promise<void>;
    onRoomUserUpdate(fun: (updateType: "DELETE" | "ADD" | "UPDATE", userList: ZegoRoomUser[], roomID: string) => void): boolean;
    onRoomUserDeviceUpdate(fun: (updateType: ZegoDeviceUpdateType, userID: string, roomID: string) => void): boolean;
    onRoomTokenWillExpire(fun: (roomID: string) => void): boolean;
    onRoomExtraInfoUpdate(fun: (roomExtraInfoList: ZegoRoomExtraInfo[]) => void): boolean;
    onRoomStateUpdate(fun: (state: "DISCONNECTED" | "CONNECTING" | "CONNECTED") => void): boolean;
    onInvitedJoinLive(fun: () => void): boolean;
    onMuteCohostMicrophone(fun: () => void): boolean;
    onMuteCohostCamera(fun: () => void): boolean;
    onKickedOutRoom(fun: () => void): boolean;
    onBroadcastMessageRecv(fun: (msgList: {
        fromUser: ZegoUser;
        message: string;
    }[]) => void): void;
    private playStream;
    private generateStreamID;
    private generateVideoView;
    private onOtherEvent;
    private renderViewHandle;
    private transFlutterData;
    private triggerStreamHandle;
    private triggerPreview;
    private execRoomUserUpdateCallback;
    private execMuteCohostMicrophoneCallback;
    private execMuteCohostCameraCallback;
    private execInvitedLiveJoinCallback;
    private execRoomExtraInfoCallback;
    private execKickedOutRoomCallback;
    private getRoomRoleByStreamID;
    private getRoomRoleByUserID;
    private createStream;
}
